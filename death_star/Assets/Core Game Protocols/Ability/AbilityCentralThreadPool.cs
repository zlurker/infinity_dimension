using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public enum NETWORK_CLIENT_ELIGIBILITY {
    GRANTED, DENIED, LOCAL_HOST
}

public enum ON_VARIABLE_CATERGORY {
    ON_CHANGED, ON_CALLED
}

public class AbilityNodeNetworkData<T> : AbilityNodeNetworkData {

    public T value;

    public AbilityNodeNetworkData(int nId, int vId, T v, byte[] aD) {
        nodeId = nId;
        varId = vId;
        value = v;
        additionalData = aD;

        dataType = typeof(T);
    }

    public AbilityNodeNetworkData(int nId, int vId, T v) {
        nodeId = nId;
        varId = vId;
        value = v;

        dataType = typeof(T);
    }

    public override void CallbackNetworkPoint(AbilityCentralThreadPool central) {
        INodeNetworkPoint nwPt = central.GetNode(central.GetNetworkPoint(nodeId)) as INodeNetworkPoint;
        nwPt.ProcessDataPacket(this);
    }

    public override void ApplyDataToTargetVariable(AbilityCentralThreadPool central) {
        central.UpdateVariableValue<T>(nodeId, varId, value,false);
    }
}

public class AbilityNodeNetworkData {
    public int nodeId;
    public int varId;
    public byte[] additionalData;
    public Type dataType;

    public virtual void CallbackNetworkPoint(AbilityCentralThreadPool central) {

    }

    public virtual void ApplyDataToTargetVariable(AbilityCentralThreadPool central) {
    }
}

public class NodeThread {

    int currNode;
    int startingPt;

    // To be used for creation of new threads when it branches out.
    // generatedNodeTheads/possiblePaths.       
    protected int generatedNodeThreads;
    protected int possiblePaths;

    public NodeThread(int sPt) {

        startingPt = sPt;
        currNode = -1;
    }

    public int GetStartingPoint() {
        return startingPt;
    }

    public void SetNodeData(int cN, int pS) {
        currNode = cN;
        SetPossiblePaths(pS);
    }

    public void SetPossiblePaths(int pS) {
        generatedNodeThreads = 0;
        possiblePaths = pS;
    }

    public int GetCurrentNodeID() {
        return currNode;
    }

    public int GetPossiblePaths() {
        return possiblePaths;
    }

    public virtual NodeThread CreateNewThread() {
        generatedNodeThreads++;

        if(possiblePaths > generatedNodeThreads)
            return new NodeThread(startingPt);

        return null;
    }
}

public class NodeInstanceData {

}

public class AbilityCentralThreadPool : IRPGeneric, ITimerCallback {

    //public static EnhancedList<AbilityCentralThreadPool> globalCentralList = new EnhancedList<AbilityCentralThreadPool>();
    public static EnhancedList<List<int>> globalCentralClusterList = new EnhancedList<List<int>>();

    public AbilityCentralThreadPool() {
        playerId = -1;
        InitialiseCentralVariables();
    }

    public AbilityCentralThreadPool(int pId) {
        playerId = pId;
        InitialiseCentralVariables();
    }

    void InitialiseCentralVariables() {
        networkNodeData = new Dictionary<int, List<AbilityNodeNetworkData>>();
        activeThreads = new EnhancedList<NodeThread>();
        timerEventId = -1;
        //networkObjectId = -1;
        //instId = -1;
    }

    private Variable[][] runtimeParameters;
    private Type[] subclassTypes;
    private Transform abilityNodeRoot;
    private AbilityTreeNode[] nodes;

    private int[] nodeBranchingData;

    //private AbilityBooleanData booleanData;
    private bool[][] booleanData;

    private int[][] autoManagedVar;

    private int[] progenitorData;

    private int playerId;

    private int castingPlayer;

    // This thread's ID
    private int centralId;

    private int timerEventId;

    private Dictionary<int, List<AbilityNodeNetworkData>> networkNodeData;


    private Dictionary<int, HashSet<Tuple<int, int, int>>> sharedInstance;

    // 1st tuple for target node/var, 2nd for types for this target, 3rd for 
    // This is generated by Manager.
    private Dictionary<int, Dictionary<ON_VARIABLE_CATERGORY, Dictionary<int, HashSet<int>>>> targettedNodes;

    // References for instances targets. 
    //private Dictionary<int, Dictionary<Type, Dictionary<int, HashSet<Tuple<int, int>>>>> quickInstanceTargetRef;

    //private Dictionary<int,<Tuple<int,int>>>

    private int centralClusterId;
    private int clusterPos;

    //private List<AbilityNodeNetworkData> networkNodeData;

    // Current threads active
    private EnhancedList<NodeThread> activeThreads;

    /*#region Network-Related Code
    private int networkObjectId;
    private int instId;

    public void NetworkObjectCreationCallback(int networkObjId, int iId) {
        networkObjectId = networkObjId;
        instId = iId;
    }

    public int ReturnNetworkObjectId() {
        return networkObjectId;
    }

    public int ReturnInstId() {
        return instId;
    }
    #endregion
    */

    public int GetNetworkPoint(int nodeId) {
        return progenitorData[nodeId];
    }


    public AbilityTreeNode GetNode(int id) {
        return CreateNewNodeIfNull(id);
    }

    public Transform GetAbilityRoot() {
        return abilityNodeRoot;
    }

    // Base method to get variables.
    public Variable ReturnVariable(int node, int variable) {

        if(CheckIfReferenced(node, variable))
            return GetRootReferenceCentral(node).ReturnVariable(nodes[node].GetReference().Item2, variable);

        return runtimeParameters[node][variable];
    }

    public Variable ReturnVariable(int node, string vName) {
        int variable = LoadedData.loadedParamInstances[subclassTypes[node]].variableAddresses[vName];
        return ReturnVariable(node, variable);
    }

    public RuntimeParameters<T> ReturnRuntimeParameter<T>(int node, string vName) {
        int variable = LoadedData.loadedParamInstances[subclassTypes[node]].variableAddresses[vName];
        return ReturnVariable(node, variable).field as RuntimeParameters<T>;
    }

    public RuntimeParameters<T> ReturnRuntimeParameter<T>(int node, int variable) {
        return ReturnVariable(node, variable).field as RuntimeParameters<T>;
    }

    public int ReturnPlayerCasted() {
        return castingPlayer;
    }
    public int ReturnCentralId() {
        return centralId;
    }

    public void SetCentralData(int cP, int tId, Variable[][] rP, Type[] sT, int[] nBD, bool[][] aBD, int[][] amVar, int cId, Dictionary<int, Dictionary<ON_VARIABLE_CATERGORY, Dictionary<int, HashSet<int>>>> oVC, int[] pD) {

        abilityNodeRoot = new GameObject(tId.ToString()).transform;
        //Debug.Log("Ability created.");

        castingPlayer = cP;
        centralId = tId;
        runtimeParameters = rP;
        subclassTypes = sT;
        nodeBranchingData = nBD;
        booleanData = aBD;
        autoManagedVar = amVar;
        centralClusterId = cId;
        nodes = new AbilityTreeNode[rP.Length];
        progenitorData = pD;

        targettedNodes = new Dictionary<int, Dictionary<ON_VARIABLE_CATERGORY, Dictionary<int, HashSet<int>>>>(oVC);
        //Debug.Log("OVC Count: " + oVC.Count);

        //foreach(var key in onVarCalled.Keys) {
        //Debug.Log(key);
        //}
        //onGet = new Dictionary<Tuple<int, int>, HashSet<Tuple<int, int>>>();
        sharedInstance = new Dictionary<int, HashSet<Tuple<int, int, int>>>();
        //quickInstanceTargetRef = new Dictionary<int, Dictionary<Type, Dictionary<int, HashSet<Tuple<int, int>>>>>();
    }

    public void AddSharedInstance(int key, Tuple<int, int, int> value) {

        // Handles instancing
        if(!sharedInstance.ContainsKey(key))
            sharedInstance.Add(key, new HashSet<Tuple<int, int, int>>());

        if(!sharedInstance[key].Contains(value))
            sharedInstance[key].Add(value);


    }

    public void RemoveSharedInstance(int key, Tuple<int, int, int> value) {
        if(sharedInstance.ContainsKey(key))
            if(sharedInstance[key].Contains(value))
                sharedInstance[key].Remove(value);
    }

    public int GetNodeBranchData(int id) {
        return nodeBranchingData[id];
    }

    public int GetNewThread(int startNode) {
        return activeThreads.Add(new NodeThread(startNode));
    }

    public bool[] GetNodeBoolValues(int id) {
        return booleanData[id];
    }

    public void SetNodeBoolValue(bool value, int node, int var) {
        booleanData[node][var] = value;
    }

    public int GetClusterID() {
        return centralClusterId;
    }

    public int GetPlayerId() {
        return playerId;
    }

    public int AddNewThread(NodeThread inst) {
        return activeThreads.Add(inst);
    }

    public NodeThread GetActiveThread(int threadId) {
        return activeThreads.l[threadId];
    }

    public void SetTimerEventID(int id) {
        timerEventId = id;
    }

    public void AddVariableNetworkData(AbilityNodeNetworkData aNND) {
        //Debug.Log("Variable Data added.");

        if(timerEventId > -1) {
            //Debug.Log("Timer extended.");
            LoadedData.GetSingleton<Timer>().UpdateEventStartTime(timerEventId, Time.realtimeSinceStartup);
        } else {
            //Debug.Log("New timer added.");
            timerEventId = LoadedData.GetSingleton<Timer>().CreateNewTimerEvent(0.05f, this);
            networkNodeData.Add(timerEventId, new List<AbilityNodeNetworkData>());
        }

        networkNodeData[timerEventId].Add(aNND);
    }

    public void CallOnTimerEnd(int eventId) {
        UpdateAbilityDataEncoder encoder = NetworkMessageEncoder.encoders[(int)NetworkEncoderTypes.UPDATE_ABILITY_DATA] as UpdateAbilityDataEncoder;
        //Debug.Log("Sending data");

        AbilityNodeNetworkData[] data = networkNodeData[eventId].ToArray();
        networkNodeData.Remove(eventId);

        encoder.SendVariableManifest(this, data);

        if(timerEventId == eventId)
            timerEventId = -1;
    }

    public void StartThreads() {
        int lastNodeId = runtimeParameters.Length - 1;
        int threadId = GetNewThread(lastNodeId);

        activeThreads.l[threadId].SetNodeData(lastNodeId, nodeBranchingData[lastNodeId]);
        UpdateVariableData<int>(threadId, 0);
    }

    public bool CheckIfReferenced(int nodeId, int variableId) {
        if(nodes[nodeId] == null)
            return false;

        Tuple<int, int, int> reference = nodes[nodeId].GetReference();
        bool notInstanced = LoadedData.GetVariableType(subclassTypes[nodeId], variableId, VariableTypes.NON_INSTANCED);

        // Returns null if this is the root.

        //Debug.Log("Ref: " + reference);
        if(notInstanced || reference == null || (reference.Item1 == castingPlayer && reference.Item2 == centralId && reference.Item3 == nodeId))
            return false;

        return true;
    }

    public AbilityCentralThreadPool GetRootReferenceCentral(int nodeId) {
        Tuple<int, int, int> reference = nodes[nodeId].GetReference();
        return AbilitiesManager.aData[reference.Item1].playerSpawnedCentrals.GetElementAt(reference.Item2);
    }

    public AbilityTreeNode GetRootReferenceNode(int nodeId) {

        if(nodes[nodeId] == null)
            return null;

        Tuple<int, int, int> reference = nodes[nodeId].GetReference();
        return GetRootReferenceCentral(nodeId).GetNode(reference.Item3);
    }

    public NETWORK_CLIENT_ELIGIBILITY CheckEligibility(int nodeId, int variableId) {

        if(LoadedData.GetVariableType(subclassTypes[nodeId], variableId, VariableTypes.CLIENT_ACTIVATED)) {
            if(playerId != ClientProgram.clientId)
                return NETWORK_CLIENT_ELIGIBILITY.DENIED;
            else
                return NETWORK_CLIENT_ELIGIBILITY.GRANTED;
        }

        if(LoadedData.GetVariableType(subclassTypes[nodeId], variableId, VariableTypes.HOST_ACTIVATED))
            if(ClientProgram.hostId != ClientProgram.clientId)
                return NETWORK_CLIENT_ELIGIBILITY.DENIED;
            else
                return NETWORK_CLIENT_ELIGIBILITY.GRANTED;

        return NETWORK_CLIENT_ELIGIBILITY.LOCAL_HOST;
    }

    public void UpdateVariableValue<T>(int nodeId, int variableId, T value, bool runNetworkCode = true, bool runValueChanged = true) {

        bool reference = CheckIfReferenced(nodeId, variableId);

        // If reference is not empty, redirects it to change that variable instead.
        if(reference) {
            Tuple<int, int, int> refLink = nodes[nodeId].GetReference();

            //Debug.LogFormat("Var set, central {0}, node {1}, var {2}, value {3}", refLink.Item1, refLink.Item2, variableId, value);
            GetRootReferenceCentral(nodeId).UpdateVariableValue<T>(refLink.Item2, variableId, value, runValueChanged);
            return;
        }

        if(runNetworkCode) {
            NETWORK_CLIENT_ELIGIBILITY nCE = CheckEligibility(nodeId, variableId);

            switch(nCE) {
                case NETWORK_CLIENT_ELIGIBILITY.GRANTED:
                    AbilityNodeNetworkData dataPacket = new AbilityNodeNetworkData<T>(nodeId, variableId, value);
                    INodeNetworkPoint nwPointInst = nodes[progenitorData[nodeId]] as INodeNetworkPoint;
                    nwPointInst.ModifyDataPacket(dataPacket);
                    AddVariableNetworkData(dataPacket);
                    break;

                case NETWORK_CLIENT_ELIGIBILITY.DENIED:
                    return;
            }
        }

        // Does run value stuff here.
        if(runValueChanged) {

            int totalOnCalled = RunTargettedNodes<T>(nodeId, variableId, ON_VARIABLE_CATERGORY.ON_CHANGED, value);

            if(sharedInstance.ContainsKey(nodeId))
                foreach(var id in sharedInstance[nodeId]) {
                    //OnVariableChanged valChangeNode = globalCentralList.l[id.Item1].GetNode(id.Item2) as OnVariableChanged;
                    AbilityCentralThreadPool centralInst = AbilitiesManager.aData[id.Item1].playerSpawnedCentrals.GetElementAt(id.Item2);
                    //Debug.Log("Run onvalchange");
                    totalOnCalled += centralInst.RunTargettedNodes<T>(id.Item3, variableId, ON_VARIABLE_CATERGORY.ON_CALLED, value);
                }

            if(totalOnCalled > 0)
                return;
        }

        RuntimeParameters<T> paramInst = runtimeParameters[nodeId][variableId].field as RuntimeParameters<T>;

        if(paramInst != null) {
            paramInst.v = value;
        } else if(LoadedData.GetVariableType(subclassTypes[nodeId], variableId, VariableTypes.INTERCHANGEABLE)) {
            string varName = runtimeParameters[nodeId][variableId].field.n;
            int[][] links = runtimeParameters[nodeId][variableId].links;

            //Debug.LogFormat("Var changed from {0} to {1}", runtimeParameters[nodeId][variableId].field.t, typeof(T));
            runtimeParameters[nodeId][variableId] = new Variable(new RuntimeParameters<T>(varName, value), links);
        }


    }

    /*public void NodeVariableCallback<T>(int threadId, int variableId) {

        if(threadId == -1)
            return;

        int currNode = activeThreads.l[threadId].GetCurrentNodeID();
        NETWORK_CLIENT_ELIGIBILITY nCE = CheckEligibility(currNode, variableId);


        switch(nCE) {
            case NETWORK_CLIENT_ELIGIBILITY.GRANTED:
                //Debug.Log("Curr Node sent out: " + currNode);
                RuntimeParameters<T> paramInst = runtimeParameters[currNode][variableId].field as RuntimeParameters<T>;

                AbilityNodeNetworkData dataPacket =new AbilityNodeNetworkData<T>(currNode, variableId, paramInst.v);
                INodeNetworkPoint nwPointInst = nodes[progenitorData[currNode]] as INodeNetworkPoint;
                nwPointInst.ModifyDataPacket(dataPacket);
                AddVariableNetworkData(dataPacket);
                break;

            case NETWORK_CLIENT_ELIGIBILITY.DENIED:
                return;
        }

        UpdateVariableData<T>(threadId, variableId);
    }*/

    public void UpdateVariableData<T>(int threadId, int variableId, RuntimeParameters<T> var = null, bool runOnCalled = true) {

        if(threadId == -1)
            return;

        int currNode = activeThreads.l[threadId].GetCurrentNodeID();

        if(CheckEligibility(currNode, variableId) == NETWORK_CLIENT_ELIGIBILITY.DENIED)
            return;

        int[][] links = runtimeParameters[currNode][variableId].links;
        int currPossiblePaths = activeThreads.l[threadId].GetPossiblePaths();

        if(var == null)
            var = ReturnRuntimeParameter<T>(currNode, variableId);

        for(int i = 0; i < links.Length; i++) {

            int nodeId = links[i][0];
            int nodeVariableId = links[i][1];
            int linkType = links[i][2];
            int threadIdToUse = threadId;

            if(runOnCalled) {

                int totalOnCalled = RunTargettedNodes<T>(nodeId, nodeVariableId, ON_VARIABLE_CATERGORY.ON_CALLED, var.v);

                // Runs other instances OVC too
                if(sharedInstance.ContainsKey(nodeId))
                    foreach(var id in sharedInstance[nodeId]) {
                        AbilityCentralThreadPool centralInst = AbilitiesManager.aData[id.Item1].playerSpawnedCentrals.GetElementAt(id.Item2);
                        totalOnCalled += centralInst.RunTargettedNodes<T>(id.Item3, variableId, ON_VARIABLE_CATERGORY.ON_CALLED, var.v);
                    }

                if(totalOnCalled > 0)
                    continue;
            }

            NodeThread newThread = activeThreads.l[threadId].CreateNewThread();

            //Debug.LogFormat("Current info: CurrNode{0}, CurrVar{1}, CurrLink{2}, CurrLinkLen{3}",currNode,variableId,i,links[i].Length);


            if(newThread != null) {
                threadIdToUse = activeThreads.Add(newThread);
            } else {
                AbilityTreeNode currNodeInst = CreateNewNodeIfNull(currNode);

                if(currNodeInst.GetNodeThreadId() == threadIdToUse)
                    currNodeInst.SetNodeThreadId(-1);
            }

            activeThreads.l[threadIdToUse].SetNodeData(nodeId, nodeBranchingData[nodeId]);

            switch((LinkMode)linkType) {
                case LinkMode.NORMAL:
                    //Debug.Log(originalParamInst.v);
                    booleanData[nodeId][nodeVariableId] = false;
                    UpdateVariableValue<T>(nodeId, nodeVariableId, var.v);
                    break;
            }


            AbilityTreeNode nextNodeInst = CreateNewNodeIfNull(nodeId);

            int existingThread = nextNodeInst.GetNodeThreadId();

            if(existingThread > -1)
                HandleThreadRemoval(existingThread);
            //activeThreads.l[threadIdToUse](existingThread);

            //Debug.Log("Thread travelling to: " + nextNodeInst.GetType());
            nextNodeInst.SetNodeThreadId(threadIdToUse);

            //Debug.Log("Before node callback:" + GetRootReferenceNode(nodeId));
            if(CheckIfReferenced(nodeId, nodeVariableId))
                GetRootReferenceNode(nodeId).NodeCallback();
            else
                nextNodeInst.NodeCallback();

            if(nodeBranchingData[nodeId] == 0)
                HandleThreadRemoval(threadIdToUse);

            // Automatically callback all auto managed nodes.
            for(int j = 0; j < autoManagedVar[nodeId].Length; j++)

                // Callback those that are not blocked.
                if(!booleanData[nodeId][autoManagedVar[nodeId][j]])
                    runtimeParameters[nodeId][autoManagedVar[nodeId][j]].field.RunGenericBasedOnRP<int[]>(this, new int[] { nodeId, autoManagedVar[nodeId][j] });
        }

        // Updates the other instances.
        if(sharedInstance.ContainsKey(currNode))
            foreach(var inst in sharedInstance[currNode]) {
                //Debug.LogFormat("Central {0} Node {1} is a instance to be set.", inst.Item1, inst.Item2);
                AbilityCentralThreadPool centralInst = AbilitiesManager.aData[inst.Item1].playerSpawnedCentrals.GetElementAt(inst.Item2);

                centralInst.UpdateVariableData<T>(centralInst.GetNode(inst.Item3).GetNodeThreadId(), variableId, var, runOnCalled);
            }
    }

    public int RunTargettedNodes<T>(int node, int variable, ON_VARIABLE_CATERGORY category, T value) {
        int targetInCatergory = 0;

        //Debug.Log("RTN called");

        if(targettedNodes.ContainsKey(node))
            if(targettedNodes[node].ContainsKey(category))
                foreach(var vCLoop in targettedNodes[node][category]) {

                    if(variable == vCLoop.Key)
                        targetInCatergory += vCLoop.Value.Count;

                    foreach(int vC in vCLoop.Value) {
                        IOnVariableInterface nodeInst = GetNode(vC) as IOnVariableInterface;
                        nodeInst.CentralCallback<T>(value, node, variable, 0);
                    }
                }

        return targetInCatergory;
    }


    public void HandleThreadRemoval(int threadId) {

        //int cNode = activeThreads.l[threadId].GetCurrentNodeID();
        //int sPoint = activeThreads.l[threadId].GetStartingPoint();
        //Debug.LogFormat("Thread {0} ending at {1}", threadId, CreateNewNodeIfNull(activeThreads.l[threadId].GetCurrentNodeID()).GetType());

        AbilityTreeNode threadNode = CreateNewNodeIfNull(activeThreads.l[threadId].GetCurrentNodeID());

        // Only sets it to 0 if the current thread on node is the same as thread to be removed.
        if(threadNode.GetNodeThreadId() == threadId)
            threadNode.SetNodeThreadId(-1);

        CreateNewNodeIfNull(activeThreads.l[threadId].GetStartingPoint()).ThreadEndStartCallback(threadId);

        activeThreads.Remove(threadId);
        //Debug.LogFormat("Thread {0} has been removed.", threadId);
    }

    public AbilityTreeNode CreateNewNodeIfNull(int nodeId) {

        //Debug.Log(nodeId);
        if(!nodes[nodeId]) {

            // Tries to convert type into a singleton to see if it exist.
            if(LoadedData.singletonList.ContainsKey(subclassTypes[nodeId]))
                nodes[nodeId] = LoadedData.singletonList[subclassTypes[nodeId]] as AbilityTreeNode;

            if(nodes[nodeId] == null) {
                SpawnerOutput sOInst = LoadedData.GetSingleton<Spawner>().CreateScriptedObject(subclassTypes[nodeId]);
                nodes[nodeId] = sOInst.script as AbilityTreeNode;
                nodes[nodeId].SetSourceObject(sOInst);

                // Changes its name
                nodes[nodeId].name = castingPlayer.ToString() + '/' + centralId.ToString() + '/' + nodeId.ToString();

                // Adds it to root
                nodes[nodeId].transform.SetParent(abilityNodeRoot);
            }

            AbilityTreeNode inst = nodes[nodeId];

            inst.SetNodeThreadId(-1);
            inst.SetNodeId(nodeId);
            inst.SetCentralId(castingPlayer, centralId);
            return inst;
        }

        return nodes[nodeId];
    }


    // This should be ran with curr node rather than thread.
    public void RunAccordingToGeneric<T, P>(P arg) {
        int[] nodeCBInfo = (int[])(object)arg;

        AbilityTreeNode inst = CreateNewNodeIfNull(nodeCBInfo[0]);
        UpdateVariableData<T>(inst.GetNodeThreadId(), nodeCBInfo[1]);
    }
}
